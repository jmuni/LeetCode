#https://leetcode.com/problems/remove-duplicates-from-sorted-array/

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        
        #list is sorted! 
        
        #bruteforce method
        #using the first index number, see if next number is the same, if it is POP, else set orig to next index and continue!
        
        '''
        for i in range(len(nums)-1): #this probably should be range-1 because we can't access the next element on the last element! 
            if nums[i] == nums[i+1]: #the next index is same, pop that index OR remove
                nums.pop(i+1)
            #else: #next index is different
                #actually do nothing
        
        #pop may pose a problem because it makes the array smaller, which means we will be trying to access an index that no longer exists...
        
        return len(nums)
    
        #as I guess, using for means we access out of range indices...
        
        '''
        
        
        
        #my working submission...beats only 22% of submissions
        arraysize = len(nums)
        #added edge case! if empty it should return 0??
        if arraysize == 0:
            return 0
        
        done = False
        i = 0
        
        while not done:
            if i == arraysize-1: #if i is the last element, break! 
                break
            if nums[i] == nums[i+1]: #the next index is same, pop that index OR remove
                nums.pop(i+1)
                arraysize-=1 #arraysize decreases by 1 BUT WE DONT INCREMENT THE INDEX VALUE BECAUSE THE POP SHIFTS THE NEXT ELEMENT UP!
            else:
                i+=1
        
        return len(nums)
        
        
        '''
        #this one in the comments ran faster than 91% of submissions. 
        
        len_ = 1
        if len(nums)==0:
            return 0
        for i in range(1,len(nums)):
            if nums[i] != nums[i-1]:
                nums[len_] = nums[i]
                len_ +=1
        return len_
        '''        
            
                
            
        
